<html>

<head>

 <script src = "https://cdnjs.cloudflare.com/ajax/libs/three.js/109/three.min.js"></script>
  <script src = "orbitControls.js"></script>
  
	<meta charset="utf-8">
	<style>
		body {
			margin: 0px;
			background-color: #000000;
			overflow: hidden;
		}
	</style>
</head>

<body>
	<script>

// This creates a camera. It has a field of view, a size, a near clipping plane and a far clipping plane      
	var camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 80); 
// We need to create a scene and add things to it.   
	var scene = new THREE.Scene();
// Now we are goint to create some built in geometry  
	var geometry = new THREE.BoxGeometry(1, 1, 1);
   
   var geometry2 = new THREE.BoxGeometry (1,1,1);
   // var geometry3 = new THREE.BoxGeometry(1,1,1); 
      
     
// To do this we need a texture loader object to load the texture 
	var myTextureLoader = new THREE.TextureLoader();
// Then we can load the texture into a variable
	var myTexture = myTextureLoader.load('birds.jpg');
      
  
     
// This defines how the surface of the object reflects light
// We're using Phong. There are lots of other types.      
	var material = new THREE.MeshBasicMaterial({map: myTexture});
    
      
// We can now create a mesh using the geomentry and the material
    var mesh = new THREE.Mesh(geometry, material);
    
 var mesh2 = new THREE.Mesh(geometry, material); 
  // var mesh3 = new THREE.Mesh(geometry2, material); // If we want to see stuff, we will need a light.
// The argument is the colour of the light in hexadecimal.      
	var light = new THREE.DirectionalLight("rgb(255,255,255)");
// Now we can create our renderer. Thiis renders the scene.      
	var renderer = new THREE.WebGLRenderer();

// Now we can set some variables for the objects.
	camera.position.z = 3;
// Notice we can also us the set method to position things.
    //light.position.z = 2;
	light.position.set(2,2,2);
// Now we add the mesh and the light to the scene.
	scene.add(mesh);
    scene.add(mesh2);
	scene.add(light);
 
// This is to make sure that the scene understands the resolution of the device we are on.
	renderer.setPixelRatio(window.devicePixelRatio);
// We can also set the size of the render window
	renderer.setSize(window.innerWidth, window.innerHeight);
// Finally we want to connect the renderer to the HTML document
	document.body.appendChild(renderer.domElement);
// And make sure that when the page is resized, everything gets updated 
	window.addEventListener('resize', onWindowResize, false); 
    var controls = new THREE.OrbitControls (camera, renderer.domElement);

//  Now we can have a draw loop.    
function draw() {
 	mesh.rotation.x += 0.005;
    mesh.rotation.y+= 0.005;
  	mesh.position.x = -1.3;
  
	
  
 	mesh2.position.x = 0.1;
    mesh2.rotation.x += -0.005;
	mesh2.rotation.y+= -0.005;  
   
  
  //camera.position.x += 0.01;
    controls.update();
	renderer.render(scene, camera,);
	requestAnimationFrame(draw);
  
  //'posx.jpg
  
    let materialArray = [];
        let texture_ft = new THREE.TextureLoader().load( 'Daylight Box_Front.bmp');
        let texture_bk = new THREE.TextureLoader().load( 'Daylight Box_Back.bmp');
        let texture_up = new THREE.TextureLoader().load( 'Daylight Box_Top.bmp');
        let texture_dn = new THREE.TextureLoader().load( 'Daylight Box_Bottom.bmp');
        let texture_rt = new THREE.TextureLoader().load( 'Daylight Box_Right.bmp');
        let texture_lf = new THREE.TextureLoader().load( 'Daylight Box_Left.bmp');
          
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_ft }));
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_bk }));
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_up }));
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_dn }));
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_rt }));
        materialArray.push(new THREE.MeshBasicMaterial( { map: texture_lf }));
   
       for (let i = 0; i < 6; i++)
           materialArray[i].side = THREE.BackSide;
        let skyboxGeo = new THREE.BoxGeometry( 10, 10, 10);
       let skybox = new THREE.Mesh( skyboxGeo, materialArray );
       scene.add( skybox );  
        animate();
  
}

// This is the thing that does the resizing      
function onWindowResize() {
	camera.aspect = window.innerWidth / 		window.innerHeight;
	camera.updateProjectionMatrix();
	renderer.setSize(window.innerWidth, window.innerHeight);
}    

      
      
 
// Finally, call the draw loop.      
requestAnimationFrame(draw());
      
	</script>
</body>

</html>
